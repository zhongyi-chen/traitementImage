#!/bin/sh

# @file configure
# modification of initial configure file from pandore6.6.7
# only compile pvisu and dynamic pandore library
# adapttion for Qt5, macosx (HighSierra), linux-based ENSEIRB and CREMI 
# @author V.-T. Ta (2017)

##
## ECHO
##

# Find flavor for echoing a string without a NEWLINE
# (ew_c: echo with \c, ew_n: echo with -n, ew_t: tabulation)
if (echo "example\c"; echo 1,2,3) | grep c >/dev/null; then 
    if (echo -n example; echo 1,2,3) | sed s/-n/xn/ | grep xn >/dev/null; then 
	ew_n= ew_c=' 
' ew_t='        ' 
    else
	ew_n=-n ew_c= ew_t=
    fi 
else 
    ew_n= ew_c='\c' ew_t=
fi

##
## OS
##

echo $ew_n "checking target system type""... $ew_c"
case `uname -s` in 
    Linux*);;
    Darwin*);;
    *) { echo "*** Error: operating system not supported. exit" 1>&2; exit 1; } ;;
esac
echo "$ew_t""yes"

##
## CXX Flags
##

CXX=${CXX-c++}
LD=${LD-$CXX}
MAKE=${MAKE-make}
RM='rm -rf'

# Check CXX facilities
echo $ew_n "checking C++ compiler""... $ew_c"
cat > tmp.cpp <<EOF
template<typename T> struct foo {
template<typename U> static bool bar(U u) { return true; }
};
int main() { return foo<int>::bar(12); }
EOF
if $CXX -c -o tmp.o tmp.cpp 2>/dev/null;
then
    echo "$ew_t""$CXX"
else
    echo "$ew_t""no."
    echo "*** Error: C++ compiler not found, try 'export CXX=<path>'." 1>&2
    exit 1
fi
echo $ew_n "checking linker""... $ew_c"
if ($LD -o tmp.exe tmp.o 2>/dev/null); then
    echo "$ew_t""$LD"
else
    echo "$ew_t""no."
    echo "*** Error: C++ linker not found, try 'export LD=<path>'." 1>&2; exit 1;
fi
echo $ew_n "checking $MAKE""... $ew_c"
cat > tmp.mak <<EOF
tmp.exe:  tmp.cpp
	$CXX -o tmp.exe tmp.cpp 2>/dev/null
EOF
if $MAKE -f tmp.mak 2>/dev/null 1>&2; then
    echo "$ew_t""$MAKE"
else
    echo "$ew_t""no."
    echo "*** Error: make not found, try 'export MAKE=<path>'." 1>&2; exit 1;
fi
$RM tmp.cpp tmp.mak tmp.exe tmp.o

##
## Qt/VIEWERS
##

echo $ew_n "checking Qt version ""... $ew_c"
QMAKE=""
if (type qmake) 2>/dev/null 1>&2; then
    QMAKE=qmake
fi
if (type qmake-qt4) 2>/dev/null 1>&2; then
    QMAKE=qmake-qt4
fi
if (type qmake-qt5) 2>/dev/null 1>&2; then
    QMAKE=qmake-qt5
fi
if [ -z $QMAKE ]; then
    echo "*** Error: qmake* not found; exit." 1>&2; exit 1;
fi

cat > qtver.cpp <<EOF
#include <stdio.h>
#include <qglobal.h>
int main(int argc, char *argv[]){
  printf("%s\n",QT_VERSION_STR);
  if (argc > 1) {
    int numCurrent;
    int numGiven;
    sscanf(QT_VERSION_STR,"%d.%*s",&numCurrent);
    sscanf(argv[1],"%d.%*s",&numGiven);
    return !(numGiven<= numCurrent);
  }
}
EOF
cat >qtver.pro <<EOF
TEMPLATE = app
SOURCES = qtver.cpp
TARGET = qtver
CONFIG -= app_bundle
EOF

if ($QMAKE qtver.pro -o qtver.mak)
then 
    if ($MAKE -f qtver.mak)  2>/dev/null 1>/dev/null
    then
	QTVER=`./qtver`
	if (./qtver 4.0.0) 2>/dev/null 1>/dev/null
	then
	    echo "$ew_t""yes ($QTVER)."
	else
	    echo "$ew_t""no."
	    echo "*** Error: Qt version $QTVER found!; exit." 1>&2; exit 1
	fi
    else
	echo "$ew_t""no"
	echo "*** Error: Qt not found!; exit." 1>&2; exit 1
    fi
fi
$RM qtver qtver.pro qtver.cpp qtver.o qtver.mak

##
## MAKEFILE 
##

echo $ew_n "generating Makefile""... $ew_c"

cat > Makefile <<EOF
## Makefile PVISU and LIBPANDORE (DYNAMIC LIB)
##-----------------------------------------------------------
## DO NOT EDIT BY HAND
## Autogenerated by ./configure.
## If something is wrong, fix ./configure and run it again. 
##-----------------------------------------------------------
## (2017) Modified by Vinh
##
EOF

CPPFLAGS="-Isrc/pandore -DNDEBUG -O3"
CXXFLAGS="-Wall -Wextra -Werror -Wpointer-arith -Wwrite-strings -Wcast-qual "
CXXFLAGS="$CXXFLAGS -Wformat-security -Wmissing-format-attribute -Wno-overloaded-virtual" 

case `uname -s` in 
    Linux*)
	CXXFLAGS="$CXXFLAGS -s -fpic"
	LDFLAGS="-shared"
	LIB_PATH_NAME="LD_LIBRARY_PATH"
	LIB_SUFFIX="so" ;; 
    Darwin*)
	CXXFLAGS="$CXXFLAGS -fno-common"
	LDFLAGS="-dynamiclib -dynamic -fno-common -flat_namespace -undefined suppress"
	LIB_PATH_NAME="DYLD_LIBRARY_PATH"
	LIB_SUFFIX="dylib" ;;
    *) ;;
esac

cat >> Makefile <<EOF
CPPFLAGS=$CPPFLAGS
CXXFLAGS=$CXXFLAGS
LDFLAGS=$LDFLAGS
LDLIBS=$LDLIBS 

EOF
for i in src/pandore/*.cpp; do
    OBJ="$OBJ src/pandore/`basename $i .cpp`.o"
done
LIB_NAME="lib/libpandore.$LIB_SUFFIX"
PVISU="bin/pvisu"
LIB_PATH=`pwd`

cat >> Makefile <<EOF
OBJ=$OBJ
LIB=$LIB_NAME
PVISU=$PVISU

.PHONY: pre
pre:
	mkdir -p bin lib
	\$(MAKE) all

.PHONY: all
all: \$(LIB) \$(PVISU)

\$(LIB): \$(OBJ)
	 \$(RM) \$@
	 \$(CXX) -o \$@ \$(LDFLAGS) $^

\$(PVISU):
	cd src/pvisu && $QMAKE pvisu.pro && \$(MAKE)

.PHONY: clean cleanall distclean usage
clean:
	\$(RM) \$(OBJ)
	\$(MAKE) -C src/pvisu clean
cleanall: clean
	\$(RM) \$(LIB) \$(PVISU)
distclean: cleanall
	   \$(RM) -r bin lib src/pvisu/.moc src/pvisu/.obj Makefile .qmake.stash

EOF
echo "$ew_t""done."

###
### SUMMARY
###
echo " " 1>&2
echo " " 1>&2
echo "SUMMARY" 1>&2
echo "   Your system is:" `uname -prs` 1>&2
echo "   make command is:" $MAKE  1>&2
echo "   C++ compiler is:" $CXX 1>&2
echo "   Linker is:" $LD 1>&2
echo "" 1>&2
echo "   Dynamic library libpandore is: libpandore.$LIB_SUFFIX" 1>&2
echo "   Compilation options for object files:" $CXXFLAGS 1>&2
echo "   Linker options for object files:" $LDFLAGS 1>&2
echo "" 1>&2
echo "   Qt version: $QTVER" 1>&2
echo "" 1>&2
echo "COMPILATION / INSTALLATION" 1>&2
echo "   TYPE 'make' to compile."
echo "   UPDATE YOUR ~/.bashrc"
echo "      echo 'export $LIB_PATH_NAME=`pwd`/lib:\$$LIB_PATH_NAME' >> ~/.bashrc"
echo "      echo 'export PATH=`pwd`/bin:\$PATH' >> ~/.bashrc"
echo "      RELOAD your ~/.bashrc"
echo
